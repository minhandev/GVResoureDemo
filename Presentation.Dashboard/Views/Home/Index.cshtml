@{
    ViewData["Title"] = "Home Page";
}
@using Presentation.Dashboard.Resources
@using Kendo.Mvc.UI
@using Business.ModelView;
@using Infrastructure.Utilities;
@inject LocalizationService LocalizationService


<h1> @LocalizationService.GetLocalizedHtmlString("FullName")</h1>

<h1> @LocalizationService.GetLocalizedHtmlString("City")</h1>

<h1> @LocalizationService.GetLocalizedHtmlString("MobileNo")</h1>

@*@(Html.Kendo().Grid<ProductModel>()
    .Name("Grid")
    .Columns(columns =>
    {
            columns.Bound(p => p.ProductName)
            .ClientTemplate(
                @"<div class='product-photo'
                    style='background-image: url(" + @Url.Content("~/shared/web/foods/#:data.ProductID#.jpg") + ");'></div><div class='product-name'>#: ProductName #</div>").Title("Product Name").Width(320);
            columns.Bound(p => p.ProductId).Title("Unit Price").Width(150);
            columns.Bound(p => p.UnitsInStock).Title("Units In Stock").Width(150).MinScreenWidth(800);
            columns.Bound(p => p.UnitsOnOrder).Title("Units On Order").Width(150).MinScreenWidth(800);
            columns.Bound(p => p.Discontinued).Width(130);
            columns.Command(command => command.Destroy()).Width(160);
    })
    .ToolBar(toolbar =>
    {
        toolbar.Create();
        toolbar.Save();
    })
    .Editable(editable => editable.Mode(GridEditMode.InCell))
    .Pageable()
    .Navigatable()
    .Sortable()
    .Groupable()
    .Filterable()
    .Scrollable()
    .Events(events => events.Sort("onSort"))
    .DataSource(dataSource => dataSource
        .Ajax()
        .Batch(true)
        .PageSize(20)
        .ServerOperation(false)
        .Events(events => events.Error("error_handler"))
        .Read("Products_Read", "Dashboard")

    )
)
<script type="text/javascript">
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }

    function templateCell(data) {
        var template = "";
        if (data.dirtyFields.Category) {
            template += "<span class='k-dirty'></span>"
        }
        template += data.Category.CategoryName;
        return template;
    }

    // Prevent sorting when new record without Product Name is added
    function onSort(e) {
        var gridData = e.sender.dataSource.data()
        gridData.forEach(function (element) {
            if (!element.ProductName) {
                e.preventDefault()
            }
        });
    }
</script>


<style>
    .product-photo {
        display: inline-block;
        width: 32px;
        height: 32px;
        border-radius: 50%;
        background-size: 32px 35px;
        background-position: center center;
        vertical-align: middle;
        line-height: 32px;
        box-shadow: inset 0 0 1px #999, inset 0 0 10px rgba(0,0,0,.2);
        margin-left: 5px;
    }

    .product-name {
        display: inline-block;
        vertical-align: middle;
        line-height: 32px;
        padding-left: 3px;
    }

    .k-grid-content td {
        position: relative;
    }
</style>*@

